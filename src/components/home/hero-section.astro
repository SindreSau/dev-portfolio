---
import AvailableBadge from "@/components/home/available-badge.astro";
import IconCity from "@components/icons/icon-city.astro";
import DesktopParallaxIcons from "./desktop-parallax-icons.astro";
import MobileTechIcons from "./mobile-tech-icons.astro";

const AVAILABLE_FOR_WORK = import.meta.env.PUBLIC_AVAILABLE_FOR_WORK === "true";
console.log("Available for work badge is set to: ", AVAILABLE_FOR_WORK);
---

<section
    id="hero-section"
    class="w-full h-[calc(100vh-4rem)] md:overflow-hidden pointer-events-none"
>
    <div
        id="hero-text-section"
        class="md:absolute md:top-1/2 md:left-1/2 md:-translate-x-1/2 md:-translate-y-1/2 text-left z-10 md:w-2/3 lg:w-1/2 max-w-4xl pointer-events-none"
    >
        <div class="md:hidden">
            <div
                class="translate-y-15 scale-75 translate-x-[210px] w-fit opacity-80"
                id="hero-avilable-badge-mobile"
            >
                {AVAILABLE_FOR_WORK && <AvailableBadge />}
            </div>
        </div>

        <div class="hidden md:block">
            <div
                class="md:-translate-x-5 md:translate-y-1 md:scale-100 translate-x-[210px] w-fit opacity-80"
                id="hero-avilable-badge-desktop"
            >
                {AVAILABLE_FOR_WORK && <AvailableBadge />}
            </div>
        </div>

        <h1 class="flex flex-col md:text-5xl text-3xl md:gap-0 gap-2">
            <span class="">Hi, I'm </span>
            <span
                id="animated-heading"
                class="text-5xl md:text-6xl xl:text-7xl text-nowrap bg-gradient-to-r text-primary-muted dark:brightness-125 brightness-75 bg-clip-text tracking-wider font-caveat pointer-events-auto"
                >Sindre Sauarlia</span
            >
        </h1>
        <p class="mt-6 text-lg pointer-events-auto md:text-justify">
            I'm a full-stack developer dedicated to deeply understand every
            aspect of the software development process.

            <span class="text-primary-muted flex gap-2 items-center mt-1">
                <IconCity class="size-5" />
                Oslo, Norway
            </span>
        </p>
    </div>

    <!-- Desktop parallax effect component -->
    <DesktopParallaxIcons />

    <!-- Mobile tech icons component -->
    <MobileTechIcons />

    <script>
        import gsap from "gsap";
        import { SplitText } from "gsap/SplitText";
        import { ScrollTrigger } from "gsap/ScrollTrigger";

        // Initialize context variable with proper typing
        let ctx: gsap.Context | null = null;

        document.addEventListener("astro:page-load", () => {
            if (typeof gsap === "undefined") {
                console.warn("GSAP is not defined. Make sure it is loaded.");
                return;
            }

            // Register GSAP plugins
            gsap.registerPlugin(SplitText, ScrollTrigger);

            // Clean up previous animations
            ScrollTrigger.disable(false);
            ScrollTrigger.enable();
            ctx && ctx.revert();

            // Create new GSAP context
            ctx = gsap.context(() => {
                const heroSection = document.getElementById("hero-section");
                const heroTextSection =
                    document.getElementById("hero-text-section");
                const animatedHeading =
                    document.getElementById("animated-heading");

                // Fade in the hero section
                gsap.fromTo(
                    heroSection,
                    { opacity: 0 },
                    { opacity: 1, duration: 1.25, delay: 0.4 }
                );

                gsap.fromTo(
                    "#hero-avilable-badge-mobile",
                    { opacity: 0, translateY: 40 },
                    { opacity: 1, translateY: 60, duration: 0.6, delay: 1.8 }
                );

                let mm = gsap.matchMedia();

                mm.add("(max-width: 768px)", () => {
                    // Mobile animation for viewports under 769px
                    // Add scroll trigger animation for the hero text section
                    gsap.fromTo(
                        heroTextSection,
                        { translateY: 0, opacity: 1 },
                        {
                            translateY: 25,
                            opacity: 0.6,
                            duration: 0.2,
                            delay: 1,
                            scrollTrigger: {
                                trigger: heroTextSection,
                                start: "80% 40%",
                                end: "80% 10%",
                                scrub: true,
                                markers: false,
                            },
                        }
                    );
                });
                mm.add("(min-width: 769px)", () => {
                    // Desktop animation for viewports 769px and above
                    // Add scroll trigger animation for the hero text section
                    gsap.fromTo(
                        heroTextSection,
                        { translateY: 0, opacity: 1 },
                        {
                            translateY: 10,
                            opacity: 0.6,
                            duration: 0.2,
                            delay: 1,
                            scrollTrigger: {
                                trigger: heroTextSection,
                                start: "top 40%",
                                end: "top 10%",
                                scrub: true,
                                // markers: true,
                            },
                        }
                    );
                });

                // Add hover animation for the heading
                if (animatedHeading) {
                    // Create split text instance
                    const splitText = new SplitText(animatedHeading, {
                        type: "chars",
                        position: "relative",
                    });

                    // Store the timeline for later use
                    let hoverTimeline = gsap.timeline();

                    let mm = gsap.matchMedia();

                    // Animate each character
                    mm.add("(max-width: 768px)", () => {
                        hoverTimeline.fromTo(
                            splitText.chars,
                            {
                                opacity: 0,
                                scale: 0.4,

                                color: "var(--color-primary, #4f46e5)",
                                stagger: 0.025,
                                duration: 0.5,
                                ease: "power3.inOut",
                                delay: 1,
                            },
                            {
                                opacity: 1,
                                scale: 1,

                                color: "var(--color-primary, #4f46e5)",
                                stagger: 0.025,
                                duration: 0.5,
                                ease: "power3.inOut",
                                delay: 1,
                            }
                        );
                    });
                    mm.add("(min-width: 769px)", () => {
                        hoverTimeline.fromTo(
                            splitText.chars,
                            {
                                opacity: 0.1,
                                scale: 0.5,

                                color: "var(--color-primary, #4f46e5)",
                                stagger: 0.025,
                                duration: 0.5,
                                ease: "power3.inOut",
                                delay: 1,
                            },
                            {
                                opacity: 1,
                                scale: 1.1,

                                color: "var(--color-primary, #4f46e5)",
                                stagger: 0.025,
                                duration: 0.5,
                                ease: "power3.inOut",
                                delay: 1,
                            }
                        );
                    });
                }
            });
        });

        // Clean up on page leave
        document.addEventListener("astro:before-swap", () => {
            ctx && ctx.revert();
        });
    </script>
</section>
