---
import AvailableBadge from "@/components/home/available-badge.astro";
import { Icon } from "astro-icon/components";
import IconCity from "../icons/icon-city.astro";

const AVAILABLE_FOR_WORK = import.meta.env.VITE_AVAILABLE_FOR_WORK === "true";

type TechData = {
    plane: number;
    name: string;
    iconifyPkg: string;
    iconifyIcon: string;
    size: string;
    top: string;
    left: string;
};

// Tech data structure for reuse across animations
const techData: TechData[] = [
    // ===== MAIN LANGUAGES (PLANE 1 - NEAR) =====

    // TypeScript (Top)
    {
        plane: 1,
        name: "TypeScript",
        iconifyPkg: "logos",
        iconifyIcon: "typescript-icon",
        size: "4",
        top: "15%",
        left: "40%",
    },

    // Python (Bottom Left)
    {
        plane: 1,
        name: "Python",
        iconifyPkg: "logos",
        iconifyIcon: "python",
        size: "4",
        top: "68%",
        left: "18%",
    },

    // C# (Bottom Right)
    {
        plane: 1,
        name: "C#",
        iconifyPkg: "devicon",
        iconifyIcon: "csharp",
        size: "4",
        top: "68%",
        left: "72%",
    },

    // ===== FRAMEWORKS BY LANGUAGE (PLANE 2 - MID) =====

    // TypeScript Ecosystem (Top Area)
    {
        plane: 2,
        name: "React",
        iconifyPkg: "logos",
        iconifyIcon: "react",
        size: "3",
        top: "27%",
        left: "32%",
    },
    {
        plane: 2,
        name: "Next.js",
        iconifyPkg: "devicon",
        iconifyIcon: "nextjs",
        size: "3",
        top: "33%",
        left: "45%",
    },
    {
        plane: 2,
        name: "Vue",
        iconifyPkg: "logos",
        iconifyIcon: "vue",
        size: "3",
        top: "28%",
        left: "58%",
    },
    {
        plane: 2,
        name: "Astro",
        iconifyPkg: "devicon",
        iconifyIcon: "astro",
        size: "3",
        top: "19%",
        left: "80%",
    },
    {
        plane: 2,
        name: "Node.js",
        iconifyPkg: "logos",
        iconifyIcon: "nodejs-icon",
        size: "3",
        top: "41%",
        left: "78%",
    },
    {
        plane: 2,
        name: "Hono",
        iconifyPkg: "logos",
        iconifyIcon: "hono",
        size: "3",
        top: "28%",
        left: "9%",
    },
    {
        plane: 2,
        name: "Express",
        iconifyPkg: "simple-icons",
        iconifyIcon: "express",
        size: "3",
        top: "17%",
        left: "13%",
    },
    {
        plane: 2,
        name: "Deno",
        iconifyPkg: "logos",
        iconifyIcon: "deno",
        size: "3",
        top: "22%",
        left: "70%",
    },
    {
        plane: 2,
        name: "Bun",
        iconifyPkg: "logos",
        iconifyIcon: "bun",
        size: "3",
        top: "8%",
        left: "55%",
    },

    // Python Ecosystem (Bottom Left)
    {
        plane: 2,
        name: "FastAPI",
        iconifyPkg: "skill-icons",
        iconifyIcon: "fastapi",
        size: "3",
        top: "62%",
        left: "10%",
    },
    {
        plane: 2,
        name: "TensorFlow",
        iconifyPkg: "logos",
        iconifyIcon: "tensorflow",
        size: "3",
        top: "78%",
        left: "30%",
    },
    {
        plane: 2,
        name: "PyTorch",
        iconifyPkg: "logos",
        iconifyIcon: "pytorch-icon",
        size: "3",
        top: "70%",
        left: "35%",
    },

    // C# Ecosystem (Bottom Right)
    {
        plane: 2,
        name: "ASP.NET",
        iconifyPkg: "devicon",
        iconifyIcon: "dotnetcore",
        size: "3",
        top: "68%",
        left: "58%",
    },

    // ===== TOOLS & LIBRARIES (PLANE 3 - FAR) =====

    // Top (TypeScript ecosystem tools)
    {
        plane: 3,
        name: "TailwindCSS",
        iconifyPkg: "logos",
        iconifyIcon: "tailwindcss-icon",
        size: "2.5",
        top: "15%",
        left: "25%",
    },

    // Bottom Right (C# ecosystem tools)
    {
        plane: 3,
        name: "Docker",
        iconifyPkg: "logos",
        iconifyIcon: "docker-icon",
        size: "2.5",
        top: "65%",
        left: "80%",
    },
    {
        plane: 3,
        name: "PostgreSQL",
        iconifyPkg: "logos",
        iconifyIcon: "postgresql",
        size: "2.5",
        top: "75%",
        left: "75%",
    },
    {
        plane: 3,
        name: "OpenTelemetry",
        iconifyPkg: "devicon",
        iconifyIcon: "opentelemetry",
        size: "2.5",
        top: "63%",
        left: "52%",
    },
    {
        plane: 3,
        name: "Git",
        iconifyPkg: "mdi",
        iconifyIcon: "git",
        size: "2.5",
        top: "60%",
        left: "85%",
    },
    {
        plane: 3,
        name: "GitHub",
        iconifyPkg: "mdi",
        iconifyIcon: "github",
        size: "2.5",
        top: "70%",
        left: "90%",
    },
];

// Helper function to get the size class
const getSizeClass = (size: string) => {
    return size === "2.5"
        ? "size-10"
        : size === "3"
          ? "size-12"
          : size === "4"
            ? "size-16"
            : size === "4.5"
              ? "size-20"
              : "size-16";
};

// Filter tech by plane
const plane1Tech = techData.filter(tech => tech.plane === 1);
const plane2Tech = techData.filter(tech => tech.plane === 2);
const plane3Tech = techData.filter(tech => tech.plane === 3);
---

<section
    id="hero-section"
    class="w-full h-[calc(100vh-4rem)] md:overflow-hidden pointer-events-none"
>
    <div
        class="md:absolute md:top-1/2 md:left-1/2 md:-translate-x-1/2 md:-translate-y-1/2 text-left z-10 md:w-2/3 lg:w-1/2 max-w-4xl pointer-events-none"
    >
        <div
            class="md:-translate-x-5 md:translate-y-1 translate-y-12 scale-75 md:scale-100 translate-x-[210px] w-fit opacity-80"
        >
            {AVAILABLE_FOR_WORK && <AvailableBadge />}
        </div>

        <h1 class="flex flex-col md:text-5xl text-3xl">
            <span class="">Hi, I'm </span>
            <span
                id="animated-heading"
                class="xl:text-7xl text-nowrap md:text-5xl bg-gradient-to-r text-primary-muted dark:brightness-125 brightness-75 bg-clip-text uppercase md:tracking-wider font-expletus pointer-events-auto"
                >Sindre Sauarlia</span
            >
        </h1>
        <p class="mt-4 text-lg pointer-events-auto text-justify">
            I'm a full-stack developer dedicated to deeply understand every
            aspect of the software development process.

            <span class="text-primary-muted flex gap-2 items-center mt-1">
                <IconCity class="size-5" />
                Oslo, Norway
            </span>
        </p>
    </div>

    <!-- Desktop parallax effect following mouse -->
    <div
        id="planes-wrapper"
        class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full h-screen overflow-hidden hide-on-touchscreen hidden md:block max-w-[1440px] text-primary-muted"
    >
        <div id="plane-1" class="plane-near w-full h-full absolute">
            {
                plane1Tech.map(tech => (
                    <div
                        class="codelang-card absolute"
                        style={`top: ${tech.top}; left: ${tech.left};`}
                    >
                        <Icon
                            name={`${tech.iconifyPkg}:${tech.iconifyIcon}`}
                            class={getSizeClass(tech.size)}
                        />
                    </div>
                ))
            }
        </div>

        <div id="plane-2" class="plane-mid w-full h-full absolute">
            {
                plane2Tech.map(tech => (
                    <div
                        class="codelang-card absolute"
                        style={`top: ${tech.top}; left: ${tech.left};`}
                    >
                        <Icon
                            name={`${tech.iconifyPkg}:${tech.iconifyIcon}`}
                            class={getSizeClass(tech.size)}
                        />
                    </div>
                ))
            }
        </div>

        <div id="plane-3" class="plane-far w-full h-full absolute">
            {
                plane3Tech.map(tech => (
                    <div
                        class="codelang-card absolute"
                        style={`top: ${tech.top}; left: ${tech.left};`}
                    >
                        <Icon
                            name={`${tech.iconifyPkg}:${tech.iconifyIcon}`}
                            class={getSizeClass(tech.size)}
                        />
                    </div>
                ))
            }
        </div>
    </div>

    <!-- Mobile tech carousel -->
    <div
        id="tech-carousel"
        class="hide-on-mouse absolute bottom-10 left-0 w-full overflow-hidden pointer-events-none"
    >
        <div class="carousel-track flex gap-6 px-4 py-2">
            <!-- Carousel items will be duplicated via JavaScript for endless loop -->
            {
                techData.map(tech => (
                    <div
                        class={`carousel-item flex-shrink-0 transition-all duration-300 tech-plane-${tech.plane}`}
                    >
                        <div class="codelang-card">
                            <Icon
                                name={`${tech.iconifyPkg}:${tech.iconifyIcon}`}
                                class={getSizeClass(
                                    tech.plane === 1
                                        ? "3.5"
                                        : tech.plane === 2
                                          ? "2.8"
                                          : "2.2"
                                )}
                            />
                        </div>
                    </div>
                ))
            }
        </div>
    </div>

    <script>
        import { gsap } from "gsap";
        import { SplitText } from "gsap/SplitText";
        import { ScrollTrigger } from "gsap/ScrollTrigger";

        document.addEventListener("astro:page-load", () => {
            if (typeof gsap === "undefined") {
                console.error("GSAP is not defined. Make sure it is loaded.");
                return;
            }

            // Register GSAP plugins
            gsap.registerPlugin(SplitText, ScrollTrigger);

            const heroSection = document.getElementById("hero-section");
            const plane1 = document.getElementById("plane-1");
            const plane2 = document.getElementById("plane-2");
            const plane3 = document.getElementById("plane-3");
            const animatedHeading = document.getElementById("animated-heading");
            const techCarousel = document.getElementById("tech-carousel");

            // Simple fade in animation with gsap for each plane when the page loads
            gsap.fromTo(
                plane1,
                { opacity: 0, scale: 0.8 },
                { opacity: 1, scale: 1, duration: 1.25 }
            );
            gsap.fromTo(
                plane2,
                { opacity: 0, scale: 0.8 },
                { opacity: 1, scale: 1, duration: 1.25, delay: 0.1 }
            );
            gsap.fromTo(
                plane3,
                { opacity: 0, scale: 0.8 },
                { opacity: 1, scale: 1, duration: 1.25, delay: 0.2 }
            );
            gsap.fromTo(
                heroSection,
                { opacity: 0 },
                { opacity: 1, duration: 1.25, delay: 0.4 }
            );

            if (!heroSection || !plane1 || !plane2 || !plane3) {
                return;
            }

            // Add hover animation for the heading
            if (animatedHeading) {
                // Create split text instance
                const splitText = new SplitText(animatedHeading, {
                    type: "chars",
                    position: "relative",
                });

                // Store the timeline for later use
                let hoverTimeline = gsap.timeline();

                // Animate each character
                hoverTimeline.to(splitText.chars, {
                    y: 12,
                    scale: 1.2,
                    color: "var(--color-primary, #4f46e5)",
                    stagger: 0.028,
                    duration: 0.6,
                    ease: "power3.inOut",
                    delay: 0.6,
                });
            }

            // Variables for scroll-based parallax
            let scrollY1 = 0;
            let scrollY2 = 0;
            let scrollY3 = 0;

            // Add ScrollTrigger for parallax effect
            ScrollTrigger.create({
                trigger: "body",
                start: "top top",
                end: "bottom bottom",
                scrub: 1,
                onUpdate: self => {
                    const progress = self.progress;

                    // Store scroll-based Y positions
                    scrollY1 = progress * -800;
                    scrollY2 = progress * -500;
                    scrollY3 = progress * -300;

                    // Apply scroll effect alongside mouse movement
                    updatePlanePositions();
                },
            });

            // Function to update plane positions with both mouse and scroll effects
            const updatePlanePositions = () => {
                gsap.set(plane1, { x: currentX, y: currentY + scrollY1 });
                gsap.set(plane2, {
                    x: currentX * 0.65,
                    y: currentY * 0.65 + scrollY2,
                });
                gsap.set(plane3, {
                    x: currentX * 0.3,
                    y: currentY * 0.3 + scrollY3,
                });
            };

            let requestAnimationFrameId: number | null = null;
            let targetX = 0;
            let targetY = 0;
            let currentX = 0;
            let currentY = 0;
            const easing = 0.08;
            const speed = 0.05;
            let heroCenterX = window.innerWidth / 2;
            let heroCenterY = window.innerHeight / 2;

            const updateCenter = () => {
                heroCenterX = window.innerWidth / 2;
                heroCenterY = window.innerHeight / 2;
            };

            window.addEventListener("resize", updateCenter);

            const lerp = (start: number, target: number, amount: number) =>
                start * (1 - amount) + target * amount;

            const animate = () => {
                currentX = lerp(currentX, targetX, easing);
                currentY = lerp(currentY, targetY, easing);

                // Use the combined function to update positions
                updatePlanePositions();

                if (
                    Math.abs(currentX - targetX) < 0.01 &&
                    Math.abs(currentY - targetY) < 0.01
                ) {
                    if (Math.abs(targetX) < 0.01 && Math.abs(targetY) < 0.01) {
                        currentX = 0;
                        currentY = 0;

                        // Reset only X positions, keep scroll-based Y offsets
                        gsap.set(plane1, { x: 0, y: scrollY1 });
                        gsap.set(plane2, { x: 0, y: scrollY2 });
                        gsap.set(plane3, { x: 0, y: scrollY3 });

                        if (requestAnimationFrameId) {
                            cancelAnimationFrame(requestAnimationFrameId);
                            requestAnimationFrameId = null;
                        }
                        return;
                    }
                }
                requestAnimationFrameId = requestAnimationFrame(animate);
            };

            const manageMouseMove = (e: MouseEvent) => {
                const mouseX = e.clientX;
                const mouseY = e.clientY;
                targetX = (mouseX - heroCenterX) * speed;
                targetY = (mouseY - heroCenterY) * speed;

                if (requestAnimationFrameId === null) {
                    requestAnimationFrameId = requestAnimationFrame(animate);
                }
            };

            const handleMouseLeave = () => {
                targetX = 0;
                targetY = 0;
                if (
                    requestAnimationFrameId === null &&
                    (Math.abs(currentX) > 0.01 || Math.abs(currentY) > 0.01)
                ) {
                    requestAnimationFrameId = requestAnimationFrame(animate);
                }
            };

            const startAnimation = () => {
                document.documentElement.addEventListener(
                    "mousemove",
                    manageMouseMove
                );
                document.documentElement.addEventListener(
                    "mouseleave",
                    handleMouseLeave
                );
                updateCenter();
            };

            const stopAnimation = () => {
                document.documentElement.removeEventListener(
                    "mousemove",
                    manageMouseMove
                );
                document.documentElement.removeEventListener(
                    "mouseleave",
                    handleMouseLeave
                );
                if (requestAnimationFrameId) {
                    cancelAnimationFrame(requestAnimationFrameId);
                    requestAnimationFrameId = null;
                }
                targetX = 0;
                targetY = 0;

                // When stopping mouse animation, keep scroll-based positions
                gsap.set(plane1, { x: 0, y: scrollY1 });
                gsap.set(plane2, { x: 0, y: scrollY2 });
                gsap.set(plane3, { x: 0, y: scrollY3 });

                currentX = 0;
                currentY = 0;
            };

            const observer = new IntersectionObserver(
                entries => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            startAnimation();
                        } else {
                            stopAnimation();
                        }
                    });
                },
                { threshold: 0.1 }
            );

            observer.observe(heroSection);

            updateCenter();
        });
    </script>
</section>
