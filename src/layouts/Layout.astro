---
import CommonHead from "@/components/layout/common-head.astro";
import Footer from "@/components/layout/footer.astro";
import Header from "@/components/layout/header.astro";
import Analytics from "@vercel/analytics/astro";

import "@/global.css";

const {
    title,
    description = "Sindre Sauarlia is a full-stack developer based in Oslo, Norway. He is dedicated to deeply understand every aspect of the software development process and never stop learning.",
} = Astro.props;
---

<!doctype html>
<html lang="en">
    <CommonHead title={title} description={description} />

    <body class="smooth-wrapper min-h-screen flex flex-col">
        <header class="z-20">
            <div
                class="container mx-auto py-3 px-4 flex justify-between items-center"
            >
                <Header />
            </div>
        </header>
        <main
            class="flex-grow py-3 px-4 container mx-auto min-h-screen h-[2400px] z-10"
        >
            <div class="max-w-5xl mx-auto">
                <slot />
            </div>
        </main>
        <footer class="border-t border-border text-center">
            <div class="container mx-auto px-4">
                <Footer />
            </div>
        </footer>

        <Analytics />

        <script>
            import gsap from "gsap";
            import { ScrollTrigger } from "gsap/ScrollTrigger";
            import Lenis from "lenis";

            // Initialize context variable with proper typing
            let ctx: gsap.Context | null = null;

            document.addEventListener("astro:page-load", () => {
                // Initialize Lenis
                const lenis = new Lenis({
                    autoRaf: true,
                });

                gsap.registerPlugin(ScrollTrigger);

                // Clean up previous animations
                ScrollTrigger.disable(false);
                ScrollTrigger.enable();
                ctx && ctx.revert();

                // Create new GSAP context
                ctx = gsap.context(() => {
                    gsap.to(".scroll-fadein", {
                        scrollTrigger: {
                            trigger: ".scroll-fadein",
                            start: "0 98%",
                            end: "0 75%",
                            scrub: true,
                            // markers: true,
                        },
                        opacity: 1,
                        duration: 5,
                        translateY: 0,
                        ease: "power1.inOut",
                        stagger: {
                            amount: 0.5,
                            from: "end",
                        },
                    });
                });

                let mm = gsap.matchMedia();

                mm.add("(max-width: 768px)", () => {
                    // Shared scroll fade-in animation.
                    gsap.fromTo(
                        ".scroll-fadein",
                        {
                            opacity: 0,
                            translateY: 20,
                        },
                        {
                            scrollTrigger: {
                                trigger: ".scroll-fadein",
                                start: "0 bottom",
                                end: "0 80%",
                                scrub: true,
                                markers: false,
                            },
                            opacity: 1,
                            duration: 0.5,
                            translateY: 0,
                            ease: "power1.inOut",
                            stagger: {
                                amount: 0.5,
                                from: "start",
                            },
                        }
                    );
                });
                mm.add("(min-width: 769px)", () => {
                    // Shared scroll fade-in animation.
                    gsap.fromTo(
                        ".scroll-fadein",
                        {
                            opacity: 0,
                            translateY: 20,
                        },
                        {
                            scrollTrigger: {
                                trigger: ".scroll-fadein",
                                start: "0 bottom",
                                end: "0 88%",
                                scrub: true,
                                markers: false,
                            },
                            opacity: 1,
                            duration: 0.5,
                            translateY: 0,
                            ease: "power1.inOut",
                            stagger: {
                                amount: 0.5,
                                from: "end",
                            },
                        }
                    );
                });
            });

            // Clean up on page leave
            document.addEventListener("astro:before-swap", () => {
                ctx && ctx.revert();
            });
        </script>
    </body>
</html>

<script is:inline>
    const applyTheme = () => {
        const isDark =
            localStorage.theme === "dark" ||
            (!("theme" in localStorage) &&
                window.matchMedia("(prefers-color-scheme: dark)").matches);

        document.documentElement.classList.toggle("dark", isDark);
    };

    applyTheme();

    document.addEventListener("astro:page-load", applyTheme);

    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    mediaQuery.addEventListener("change", applyTheme);

    window.setLightTheme = () => {
        localStorage.theme = "light";
        applyTheme();
    };

    window.setDarkTheme = () => {
        localStorage.theme = "dark";
        applyTheme();
    };

    window.setSystemTheme = () => {
        localStorage.removeItem("theme");
        applyTheme();
    };
</script>
